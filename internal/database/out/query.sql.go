// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package out

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkUserExists = `-- name: CheckUserExists :one
SELECT id FROM users
  WHERE email = $1
  LIMIT 1
`

func (q *Queries) CheckUserExists(ctx context.Context, email string) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, checkUserExists, email)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}

const createUserAndReturnId = `-- name: CreateUserAndReturnId :one
INSERT INTO users ("email", "nickname")
  VALUES ($1, $2)
  RETURNING id
`

type CreateUserAndReturnIdParams struct {
	Email    string
	Nickname string
}

func (q *Queries) CreateUserAndReturnId(ctx context.Context, arg CreateUserAndReturnIdParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, createUserAndReturnId, arg.Email, arg.Nickname)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}

const getAppliances = `-- name: GetAppliances :one
SELECT id, name, wattage, group_id, user_id, created_at, updated_at FROM appliances
  WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAppliances(ctx context.Context, id pgtype.UUID) (Appliance, error) {
	row := q.db.QueryRow(ctx, getAppliances, id)
	var i Appliance
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Wattage,
		&i.GroupID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAppliancesOfUser = `-- name: GetAppliancesOfUser :many
SELECT id, name, wattage, group_id, user_id, created_at, updated_at FROM appliances
  WHERE user_id = $1
`

func (q *Queries) GetAppliancesOfUser(ctx context.Context, userID pgtype.UUID) ([]Appliance, error) {
	rows, err := q.db.Query(ctx, getAppliancesOfUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Appliance
	for rows.Next() {
		var i Appliance
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Wattage,
			&i.GroupID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGroupsOfUser = `-- name: GetGroupsOfUser :many
SELECT id, name, user_id, created_at, updated_at FROM groups
  WHERE user_id = $1
`

func (q *Queries) GetGroupsOfUser(ctx context.Context, userID pgtype.UUID) ([]Group, error) {
	rows, err := q.db.Query(ctx, getGroupsOfUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Group
	for rows.Next() {
		var i Group
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertApplianceAndReturnId = `-- name: InsertApplianceAndReturnId :one
INSERT INTO appliances ("name", wattage, user_id, group_id)
  VALUES ($1, $2, $3, $4)
  RETURNING id
`

type InsertApplianceAndReturnIdParams struct {
	Name    string
	Wattage pgtype.Numeric
	UserID  pgtype.UUID
	GroupID pgtype.UUID
}

func (q *Queries) InsertApplianceAndReturnId(ctx context.Context, arg InsertApplianceAndReturnIdParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, insertApplianceAndReturnId,
		arg.Name,
		arg.Wattage,
		arg.UserID,
		arg.GroupID,
	)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}

const updateAppliance = `-- name: UpdateAppliance :exec
UPDATE appliances 
  SET "name" = $1, wattage = $2
  WHERE id = $3
`

type UpdateApplianceParams struct {
	Name    string
	Wattage pgtype.Numeric
	ID      pgtype.UUID
}

func (q *Queries) UpdateAppliance(ctx context.Context, arg UpdateApplianceParams) error {
	_, err := q.db.Exec(ctx, updateAppliance, arg.Name, arg.Wattage, arg.ID)
	return err
}

const updateApplianceGroup = `-- name: UpdateApplianceGroup :exec
UPDATE appliances 
  SET group_id = $1
  WHERE id = $2
`

type UpdateApplianceGroupParams struct {
	GroupID pgtype.UUID
	ID      pgtype.UUID
}

func (q *Queries) UpdateApplianceGroup(ctx context.Context, arg UpdateApplianceGroupParams) error {
	_, err := q.db.Exec(ctx, updateApplianceGroup, arg.GroupID, arg.ID)
	return err
}

const updateApplianceGroupID = `-- name: UpdateApplianceGroupID :exec
UPDATE appliances 
  SET group_id = $1
  WHERE id = $2
`

type UpdateApplianceGroupIDParams struct {
	GroupID pgtype.UUID
	ID      pgtype.UUID
}

func (q *Queries) UpdateApplianceGroupID(ctx context.Context, arg UpdateApplianceGroupIDParams) error {
	_, err := q.db.Exec(ctx, updateApplianceGroupID, arg.GroupID, arg.ID)
	return err
}
